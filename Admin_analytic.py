# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'analityc_windowUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again. Do not edit this file unless you know what you are doing.
from chart import TicketSalesChart
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QDialog
from PyQt5.QtCore import Qt 
import requests
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QDialog, QMessageBox
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QIcon
# Базовый URL для API
base_url = "https://zhanyysh.pythonanywhere.com"

class Analytic_Dialog(QDialog):
    def __init__(self):
        super().__init__()
        self.setWindowIcon(QIcon("taran.png"))
        self.ui = Ui_Dialog_analytic()
        self.ui.setupUi(self)
        self.setWindowTitle("Analytic Page")
        self.setFixedSize(436, 428)

        # Инициализация списков
        self.movies = []
        self.sessions = []

        # Привязка событий
        self.ui.movie_list_combobox.currentIndexChanged.connect(self.load_sessions)
        self.ui.time_combo_box.currentIndexChanged.connect(self.display_sales_info)
        self.ui.chart_button.clicked.connect(self.show_chart)
        self.chart_window =None
        # Загрузка данных фильмов
        self.load_movies()

    def load_movies(self):
        """Загружает список фильмов с сервера."""
        try:
            response = requests.get(f"{base_url}/movies")
            if response.status_code == 200:
                self.movies = response.json()
                self.ui.movie_list_combobox.clear()
                self.ui.movie_list_combobox.addItem("All Movies", None)  # Опция для всех фильмов
                for movie in self.movies:
                    self.ui.movie_list_combobox.addItem(movie['title'], movie['id'])
            else:
                QMessageBox.critical(self, "Error", "Failed to load movies.")
        except Exception as e:
            QMessageBox.critical(self, "Error", f"An error occurred: {e}")

    def load_sessions(self):
        """Загружает список сеансов для выбранного фильма."""
        movie_id = self.ui.movie_list_combobox.currentData()
        if movie_id:
            try:
                response = requests.get(f"{base_url}/load_sessions/{movie_id}")
                if response.status_code == 200:
                    self.sessions = response.json()
                    self.ui.time_combo_box.clear()
                    self.ui.time_combo_box.addItem("All Sessions", None)
                    for session in self.sessions:
                        session_time = session['session_time']
                        self.ui.time_combo_box.addItem(session_time, session)
                else:
                    QMessageBox.critical(self, "Error", "Failed to load sessions.")
                    self.ui.time_combo_box.clear()
            except Exception as e:
                QMessageBox.critical(self, "Error", f"An error occurred: {e}")
        else:
            self.ui.time_combo_box.clear()

        self.display_sales_info()

    def display_sales_info(self):
        """Отображает информацию о продаже билетов."""
        movie_id = self.ui.movie_list_combobox.currentData()
        session_id = None

    # Получаем данные о текущем выборе сеанса
        if self.ui.time_combo_box.currentIndex() != -1:
            session_data = self.ui.time_combo_box.currentData()
            if session_data:
                session_id = session_data.get('session_id')

        if not movie_id:
        # Отображаем общую информацию о продажах
            self.show_total_sales()
            self.ui.income_label.setText("")  # Скрываем "INCOME SPEC"
        elif session_id is None:
        # Отображаем информацию о фильме без конкретного сеанса
            self.show_movie_sales(movie_id)
            self.ui.income_label.setText("")  # Скрываем "INCOME SPEC"
        else:
        # Отображаем информацию о конкретном сеансе
            self.show_session_sales(session_id)


    def show_total_sales(self):
        """Показывает общую информацию о продажах."""
        try:
            response = requests.get(f"{base_url}/purchase/total")
            if response.status_code == 200:
                data = response.json()
                total_tickets = data['total_tickets']
                total_profit = data['total_profit']
                self.ui.all_profit_label.setText(f"ALL PROFIT: {total_profit} $")
                self.ui.sold_tickets_label.setText(f"SOLD TICKETS: {total_tickets}")
            else:
                QMessageBox.critical(self, "Error", "Failed to load total sales.")
        except Exception as e:
            QMessageBox.critical(self, "Error", f"An error occurred: {e}")

    def show_movie_sales(self, movie_id):
        """Показывает информацию о продажах для всех сеансов фильма."""
        try:
            response = requests.get(f"{base_url}/purchase/movie/{movie_id}")
            if response.status_code == 200:
                data = response.json()
                total_tickets = data['total_tickets']
                total_profit = data['total_profit']
                self.ui.moive_income_label.setText(f"MOVIE INCOME: {total_profit}")
                self.ui.sold_tickets_label.setText(f"SOLD TICKETS: {total_tickets}")
            else:
                QMessageBox.critical(self, "Error", "Failed to load movie sales.")
        except Exception as e:
            QMessageBox.critical(self, "Error", f"An error occurred: {e}")

    def show_session_sales(self, session_id):
        """Показывает информацию о продажах для конкретного сеанса."""
        try:
            response = requests.get(f"{base_url}/purchase/session/{session_id}?report_type=summary")
            if response.status_code == 200:
                data = response.json()
                total_tickets = data['total_tickets']
                total_profit = data['total_profit']
                self.ui.income_label.setText(f"INCOME SPEC: {total_profit} $")
                self.ui.sold_tickets_label.setText(f"SOLD TICKETS: {total_tickets} ")
            else:
                QMessageBox.critical(self, "Error", "Failed to load session sales.")
        except Exception as e:
            QMessageBox.critical(self, "Error", f"An error occurred: {e}")

    def show_chart(self):
        if self.chart_window == None:
            self.chart_window = TicketSalesChart()
        self.chart_window.show()    

class Ui_Dialog_analytic(object):
    def setupUi(self, Dialog_analytic):
        Dialog_analytic.setObjectName("Dialog_analytic")
        Dialog_analytic.resize(436, 428)
        Dialog_analytic.setStyleSheet("background-color: rgba(0, 128, 0, 0.6);")
        Dialog_analytic.setWindowFlags(Dialog_analytic.windowFlags() & ~QtCore.Qt.WindowContextHelpButtonHint)

        # Create a horizontal line
        self.line = QtWidgets.QFrame(Dialog_analytic)
        self.line.setGeometry(QtCore.QRect(-13, 50, 481, 20))
        self.line.setStyleSheet("QWidget {\n"
                                "    border-top: 2px solid white; /* Белая линия сверху */\n"
                                "}\n")
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")

        # Labels
        self.all_profit_label = QtWidgets.QLabel(Dialog_analytic)
        self.all_profit_label.setGeometry(QtCore.QRect(30, 20, 401, 16))
        self.all_profit_label.setStyleSheet("QLabel {\n"
                                           "    color: white; /* Белый текст */\n"
                                           "    font-family: 'Alumni Sans', sans-serif; /* Шрифт Alumni Sans */\n"
                                           "    font-size: 20px; /* Размер шрифта 28 */\n"
                                           "}\n")
        self.all_profit_label.setObjectName("all_profit_label")

        # ComboBox for Movie List
        self.movie_list_combobox = QtWidgets.QComboBox(Dialog_analytic)
        self.movie_list_combobox.setGeometry(QtCore.QRect(50, 90, 141, 41))
        self.movie_list_combobox.setStyleSheet("""
            QComboBox {
                background-color: #f0fff0; /* Светло-зеленый фон */
                color: black;
                font-family: 'Alumni Sans', sans-serif;
                font-size: 14px;
                border: 1px solid #006400; /* Темно-зеленая рамка */
                border-radius: 5px;
                padding: 5px;
            }
            QComboBox::drop-down {
                border-radius: 5px;
                background-color: #f0fff0; /* Светло-зеленый фон */
                border: none;
                width: 0px;
                height: 0px;
            }
            QComboBox::down-arrow {
                width: 0px;
                height: 0px;
            }
        """)
        self.movie_list_combobox.setObjectName("movie_list_combobox")

        # ComboBox for Time Selection
        self.time_combo_box = QtWidgets.QComboBox(Dialog_analytic)
        self.time_combo_box.setGeometry(QtCore.QRect(270, 90, 111, 41))
        self.time_combo_box.setStyleSheet("""
            QComboBox {
                background-color: #f0fff0; /* Светло-зеленый фон */
                color: black;
                font-family: 'Alumni Sans', sans-serif;
                font-size: 14px;
                border: 1px solid #006400; /* Темно-зеленая рамка */
                border-radius: 5px;
                padding: 5px;
            }
            QComboBox::drop-down {
                border-radius: 5px;
                background-color: #f0fff0; /* Светло-зеленый фон */
                border: none;
                width: 0px;
                height: 0px;
            }
            QComboBox::down-arrow {
                width: 0px;
                height: 0px;
            }
        """)
        self.time_combo_box.setObjectName("time_combo_box")

        # Button for Chart
        self.chart_button = QtWidgets.QPushButton(Dialog_analytic)
        self.chart_button.setGeometry(QtCore.QRect(30, 200, 111, 41))
        self.chart_button.setStyleSheet("""
            QPushButton {
                background-color: #32cd32; /* Лаймово-зеленый фон */
                color: white; /* Белый текст */
                font-family: "Alumni Sans", sans-serif; /* Шрифт Alumni Sans */
                font-size: 14px; /* Размер шрифта (можно изменить) */
                border: 1px solid #006400; /* Темно-зеленая рамка для кнопки */
                border-radius: 5px; /* Сглаженные углы кнопки */
                padding: 10px 20px; /* Отступы внутри кнопки */
            }
            QPushButton:hover {
                background-color: #228b22; /* Темно-зеленый при наведении */
                border-color: #004d00; /* Темная рамка при наведении */
            }
            QPushButton:pressed {
                background-color: #006400; /* Еще более темный зеленый при нажатии */
                border-color: #003300; /* Темная рамка при нажатии */
            }
        """)
        self.chart_button.setObjectName("chart_button")

        # Income Labels
        self.income_label = QtWidgets.QLabel(Dialog_analytic)
        self.income_label.setGeometry(QtCore.QRect(30, 270, 321, 21))
        self.income_label.setStyleSheet("QLabel {\n"
                                       "    color: white; /* Белый текст */\n"
                                       "    font-family: 'Alumni Sans', sans-serif; /* Шрифт Alumni Sans */\n"
                                       "    font-size: 17px; /* Размер шрифта 28 */\n"
                                       "}\n")
        self.income_label.setObjectName("income_label")

        self.moive_income_label = QtWidgets.QLabel(Dialog_analytic)
        self.moive_income_label.setGeometry(QtCore.QRect(30, 320, 291, 21))
        self.moive_income_label.setStyleSheet("QLabel {\n"
                                              "    color: white; /* Белый текст */\n"
                                              "    font-family: 'Alumni Sans', sans-serif; /* Шрифт Alumni Sans */\n"
                                              "    font-size: 17px; /* Размер шрифта 28 */\n"
                                              "}\n")
        self.moive_income_label.setObjectName("moive_income_label")

        self.sold_tickets_label = QtWidgets.QLabel(Dialog_analytic)
        self.sold_tickets_label.setGeometry(QtCore.QRect(30, 370, 341, 21))
        self.sold_tickets_label.setStyleSheet("QLabel {\n"
                                              "    color: white; /* Белый текст */\n"
                                              "    font-family: 'Alumni Sans', sans-serif; /* Шрифт Alumni Sans */\n"
                                              "    font-size: 17px; /* Размер шрифта 28 */\n"
                                              "}\n")
        self.sold_tickets_label.setObjectName("sold_tickets_label")

        self.retranslateUi(Dialog_analytic)
        QtCore.QMetaObject.connectSlotsByName(Dialog_analytic)

    def retranslateUi(self, Dialog_analytic):
        _translate = QtCore.QCoreApplication.translate
        Dialog_analytic.setWindowTitle(_translate("Dialog_analytic", "Dialog"))
        self.all_profit_label.setText(_translate("Dialog_analytic", "ALL PROFIT:"))
        self.chart_button.setText(_translate("Dialog_analytic", "CHART"))
        self.income_label.setText(_translate("Dialog_analytic", "INCOME SPEC:"))
        self.moive_income_label.setText(_translate("Dialog_analytic", "MOVIE INCOME:"))
        self.sold_tickets_label.setText(_translate("Dialog_analytic", "SOLD TICKETS:"))
